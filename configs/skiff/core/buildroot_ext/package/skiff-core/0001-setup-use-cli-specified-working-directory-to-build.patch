From aeab4d27098c1603e1093d62bc8bd76681bf87ad Mon Sep 17 00:00:00 2001
From: Christian Stewart <christian@paral.in>
Date: Fri, 22 Jan 2021 02:23:26 -0800
Subject: [PATCH] setup: use cli-specified working directory to build

To avoid copying large Dockerfile resources into /tmp

Signed-off-by: Christian Stewart <christian@paral.in>
---
 builder/builder.go              | 33 +++++++++++++++++++++------------
 cmd/skiff-core/command_setup.go | 22 +++++++++++++++++++++-
 setup/setup.go                  |  6 ++++--
 setup/setup_image.go            | 13 ++++++++-----
 4 files changed, 54 insertions(+), 20 deletions(-)

diff --git a/builder/builder.go b/builder/builder.go
index 8c44979..ea18b58 100644
--- a/builder/builder.go
+++ b/builder/builder.go
@@ -28,10 +28,13 @@ import (
 type Builder struct {
 	config       *config.ConfigImageBuild
 	outputStream io.Writer
+	workDir      string
 }
 
 // NewBuilder creates a Builder.
-func NewBuilder(config *config.ConfigImageBuild) (*Builder, error) {
+//
+// workDir can be empty to use /tmp (not recommended)
+func NewBuilder(config *config.ConfigImageBuild, workDir string) (*Builder, error) {
 	return &Builder{config: config}, nil
 }
 
@@ -45,7 +48,7 @@ func (b *Builder) Close() {}
 
 // Build completes the build process.
 func (b *Builder) Build() error {
-	tmpDir, err := ioutil.TempDir("", "skiff-core-build-")
+	tmpDir, err := ioutil.TempDir(b.workDir, "skiff-core-build-")
 	if err != nil {
 		return err
 	}
@@ -53,11 +56,12 @@ func (b *Builder) Build() error {
 		os.RemoveAll(tmpDir)
 	}()
 
-	if err := b.fetchSource(tmpDir); err != nil {
+	dir, err := b.fetchSource(tmpDir)
+	if err != nil {
 		return err
 	}
 
-	return b.build(tmpDir)
+	return b.build(dir)
 }
 
 // build completes building the image with a source tree.
@@ -167,26 +171,31 @@ func (b *Builder) dockerBuild(dockerClient client.APIClient, buildPath string, r
 }
 
 // fetchSource downloads the source to a destination path.
-func (b *Builder) fetchSource(destination string) error {
+//
+// If the source is already somewhere suitable on disk, returns that path instead.
+func (b *Builder) fetchSource(destination string) (outDir string, err error) {
 	source := b.config.Source
 
 	if source == "" {
-		return errors.New("No source specified")
+		return "", errors.New("No source specified")
 	}
 
 	// determine which kind of URL it is.
 	if strings.HasPrefix(source, "git://") ||
 		(strings.HasSuffix(source, ".git") && strings.HasPrefix(source, "http")) {
-		return b.fetchSourceGit(destination, source)
+		return destination, b.fetchSourceGit(destination, source)
 	}
 
-	if strings.HasSuffix(destination, ".tar.gz") {
-		return b.fetchSourceTarball(destination, source)
+	if strings.HasSuffix(source, ".tar.gz") {
+		return destination, b.fetchSourceTarball(destination, source)
 	}
 
-	if strings.HasPrefix(destination, "/") {
-		return b.fetchSourceRsync(destination, source)
+	if strings.HasPrefix(source, "/") {
+		if _, ferr := os.Stat(source); ferr == nil {
+			return source, nil
+		}
+		return destination, b.fetchSourceRsync(destination, source)
 	}
 
-	return fmt.Errorf("Unrecognized source kind: %s", destination)
+	return "", fmt.Errorf("Unrecognized source kind: %s", destination)
 }
diff --git a/cmd/skiff-core/command_setup.go b/cmd/skiff-core/command_setup.go
index e14d4da..552d334 100644
--- a/cmd/skiff-core/command_setup.go
+++ b/cmd/skiff-core/command_setup.go
@@ -1,12 +1,15 @@
 package main
 
 import (
+	"os"
+
 	"github.com/paralin/skiff-core/setup"
 	"github.com/urfave/cli"
 )
 
 var setupArgs struct {
 	CreateUsers bool
+	WorkDir     string
 }
 
 // SetupCommands define the commands for "setup"
@@ -18,6 +21,11 @@ var SetupCommands cli.Commands = []cli.Command{
 				Usage:       "If set, core will attempt to create missing users.",
 				Destination: &setupArgs.CreateUsers,
 			},
+			cli.StringFlag{
+				Name:        "work-dir",
+				Usage:       "If set, core will use the directory for working files.",
+				Destination: &setupArgs.WorkDir,
+			},
 		},
 		Name:  "setup",
 		Usage: "Sets up users and containers.",
@@ -28,7 +36,19 @@ var SetupCommands cli.Commands = []cli.Command{
 				return cli.NewExitError("Unable to parse config: "+err.Error(), 1)
 			}
 
-			s := setup.NewSetup(conf, setupArgs.CreateUsers)
+			if _, err := os.Stat(setupArgs.WorkDir); err != nil {
+				if os.IsNotExist(err) {
+					// if we created the dir, remove it afterwards.
+					defer os.RemoveAll(setupArgs.WorkDir)
+				}
+				err = os.Mkdir(setupArgs.WorkDir, 0755)
+				if err != nil {
+					return cli.NewExitError("Unable to create working directory: "+err.Error(), 1)
+				}
+			}
+
+			s := setup.NewSetup(conf, setupArgs.WorkDir, setupArgs.CreateUsers)
+
 			err = s.Execute()
 			if err != nil {
 				return cli.NewExitError(err.Error(), 1)
diff --git a/setup/setup.go b/setup/setup.go
index 94311bf..840b460 100644
--- a/setup/setup.go
+++ b/setup/setup.go
@@ -16,6 +16,7 @@ import (
 // Setup is an instance of a setup process.
 type Setup struct {
 	config          *config.Config
+	workDir         string
 	imageSetups     map[string]*ImageSetup
 	containerSetups map[string]*ContainerSetup
 	createUsers     bool
@@ -81,9 +82,10 @@ func (s *Setup) ExecCmdContainer(containerID, userID string, stdIn io.Reader, st
 }
 
 // NewSetup builds a new Setup instance.
-func NewSetup(conf *config.Config, createUsers bool) *Setup {
+func NewSetup(conf *config.Config, workDir string, createUsers bool) *Setup {
 	return &Setup{
 		config:          conf,
+		workDir:         workDir,
 		createUsers:     createUsers,
 		imageSetups:     make(map[string]*ImageSetup),
 		containerSetups: make(map[string]*ContainerSetup),
@@ -95,7 +97,7 @@ func (s *Setup) Execute() error {
 	var jobs []SetupJob
 
 	addImageJob := func(image *config.ConfigImage) {
-		pend := NewImageSetup(image)
+		pend := NewImageSetup(image, s.workDir)
 		jobs = append(jobs, pend)
 		s.imageSetups[image.Name()] = pend
 	}
diff --git a/setup/setup_image.go b/setup/setup_image.go
index a8d5ca7..2523729 100644
--- a/setup/setup_image.go
+++ b/setup/setup_image.go
@@ -18,16 +18,19 @@ import (
 
 // ImageSetup is responsible for setting up an image.
 type ImageSetup struct {
-	logger multiwriter.MultiWriter
-	config *config.ConfigImage
+	logger  multiwriter.MultiWriter
+	config  *config.ConfigImage
+	workDir string
 
 	err error
 	wg  sync.WaitGroup
 }
 
 // NewImageSetup builds a new ImageSetup.
-func NewImageSetup(conf *config.ConfigImage) *ImageSetup {
-	s := &ImageSetup{config: conf}
+//
+// workDir can be empty to use /tmp
+func NewImageSetup(conf *config.ConfigImage, workDir string) *ImageSetup {
+	s := &ImageSetup{config: conf, workDir: workDir}
 	s.logger.AddWriter(os.Stdout)
 	return s
 }
@@ -78,7 +81,7 @@ func (i *ImageSetup) build() (buildError error) {
 		}
 	}()
 
-	bldr, err := builder.NewBuilder(bc)
+	bldr, err := builder.NewBuilder(bc, i.workDir)
 	if err != nil {
 		return err
 	}
-- 
2.30.0

