From c3e99c9962cc5a09af740113d971abca7c30b17c Mon Sep 17 00:00:00 2001
From: Christian Stewart <christian@paral.in>
Date: Fri, 20 May 2022 18:55:50 -0700
Subject: [PATCH] Revert "kthread: dynamically allocate memory to store
 kthread's full name"

This reverts commit d6986ce24fc00b0638bd29efe8fb7ba7619ed2aa.
---
 fs/proc/array.c         |  3 ---
 include/linux/kthread.h |  1 -
 kernel/kthread.c        | 32 ++------------------------------
 3 files changed, 2 insertions(+), 34 deletions(-)

diff --git a/fs/proc/array.c b/fs/proc/array.c
index eb815759842c..4b75a40fabbf 100644
--- a/fs/proc/array.c
+++ b/fs/proc/array.c
@@ -91,7 +91,6 @@
 #include <linux/string_helpers.h>
 #include <linux/user_namespace.h>
 #include <linux/fs_struct.h>
-#include <linux/kthread.h>
 
 #include <asm/processor.h>
 #include "internal.h"
@@ -102,8 +101,6 @@ void proc_task_name(struct seq_file *m, struct task_struct *p, bool escape)
 
 	if (p->flags & PF_WQ_WORKER)
 		wq_worker_comm(tcomm, sizeof(tcomm), p);
-	else if (p->flags & PF_KTHREAD)
-		get_kthread_comm(tcomm, sizeof(tcomm), p);
 	else
 		__get_task_comm(tcomm, sizeof(tcomm), p);
 
diff --git a/include/linux/kthread.h b/include/linux/kthread.h
index de5d75bafd66..adc09e3f476e 100644
--- a/include/linux/kthread.h
+++ b/include/linux/kthread.h
@@ -33,7 +33,6 @@ struct task_struct *kthread_create_on_cpu(int (*threadfn)(void *data),
 					  unsigned int cpu,
 					  const char *namefmt);
 
-void get_kthread_comm(char *buf, size_t buf_size, struct task_struct *tsk);
 bool set_kthread_struct(struct task_struct *p);
 
 void kthread_set_per_cpu(struct task_struct *k, int cpu);
diff --git a/kernel/kthread.c b/kernel/kthread.c
index 50265f69a135..b910548a9476 100644
--- a/kernel/kthread.c
+++ b/kernel/kthread.c
@@ -60,8 +60,6 @@ struct kthread {
 #ifdef CONFIG_BLK_CGROUP
 	struct cgroup_subsys_state *blkcg_css;
 #endif
-	/* To store the full name if task comm is truncated. */
-	char *full_name;
 };
 
 enum KTHREAD_BITS {
@@ -95,18 +93,6 @@ static inline struct kthread *__to_kthread(struct task_struct *p)
 	return kthread;
 }
 
-void get_kthread_comm(char *buf, size_t buf_size, struct task_struct *tsk)
-{
-	struct kthread *kthread = to_kthread(tsk);
-
-	if (!kthread || !kthread->full_name) {
-		__get_task_comm(buf, buf_size, tsk);
-		return;
-	}
-
-	strscpy_pad(buf, kthread->full_name, buf_size);
-}
-
 bool set_kthread_struct(struct task_struct *p)
 {
 	struct kthread *kthread;
@@ -134,14 +120,10 @@ void free_kthread_struct(struct task_struct *k)
 	 * Can be NULL if kmalloc() in set_kthread_struct() failed.
 	 */
 	kthread = to_kthread(k);
-	if (!kthread)
-		return;
-
 #ifdef CONFIG_BLK_CGROUP
-	WARN_ON_ONCE(kthread->blkcg_css);
+	WARN_ON_ONCE(kthread && kthread->blkcg_css);
 #endif
 	k->worker_private = NULL;
-	kfree(kthread->full_name);
 	kfree(kthread);
 }
 
@@ -455,22 +437,12 @@ struct task_struct *__kthread_create_on_node(int (*threadfn)(void *data),
 	task = create->result;
 	if (!IS_ERR(task)) {
 		char name[TASK_COMM_LEN];
-		va_list aq;
-		int len;
 
 		/*
 		 * task is already visible to other tasks, so updating
 		 * COMM must be protected.
 		 */
-		va_copy(aq, args);
-		len = vsnprintf(name, sizeof(name), namefmt, aq);
-		va_end(aq);
-		if (len >= TASK_COMM_LEN) {
-			struct kthread *kthread = to_kthread(task);
-
-			/* leave it truncated when out of memory. */
-			kthread->full_name = kvasprintf(GFP_KERNEL, namefmt, args);
-		}
+		vsnprintf(name, sizeof(name), namefmt, args);
 		set_task_comm(task, name);
 	}
 	kfree(create);
-- 
2.35.1

